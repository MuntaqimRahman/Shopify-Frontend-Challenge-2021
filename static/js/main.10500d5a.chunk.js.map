{"version":3,"sources":["hooks/useLocalStorage.tsx","contexts/search.tsx","components/header.tsx","api/GetMovies.tsx","contexts/nomination.tsx","styling/tile.tsx","components/movie-item.tsx","components/NominationSection.tsx","components/banner.tsx","pages/Homepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","currentValue","localStorage","getItem","JSON","parse","err","console","log","localStorageState","setLocalStorageState","isComponentMounted","setIsComponentMounted","useEffect","undefined","setItem","stringify","SearchContext","createContext","searchQuery","setSearchQuery","SearchContextProvider","Consumer","Provider","Header","useContext","searchQueryState","setSearchQueryState","HeaderContainer","styled","div","TextField","style","width","backgroundColor","autoFocus","value","onChange","e","newSearch","target","variant","GetMovieTitles","a","fetch","response","APIParser","post","ok","json","Promise","reject","NominationContext","nominations","setNominations","NominationContextProvider","TileContainer","SearchResult","Title","Year","Poster","buttonText","shouldGetDescription","buttonAction","isDisabled","movieDescription","ContentContainer","ContentTileContainer","TextContainer","TitleContainer","TextContentContainer","ComponentContainer","ImageContainer","ButtonContainer","src","height","alt","Button","onClick","disabled","NominationSection","searchResults","setSearchResults","isGettingData","setIsGettingData","getData","data","Response","Search","NominationContainer","SearchResults","NominationResults","SpinnerContainer","AddNomination","newTitle","newYear","newPoster","Array","isArray","RemoveNomination","newNomination","filter","checkIfDisabled","movieTitle","length","i","map","movieItem","Banner","BannerContainer","span","Homepage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10500d5a.chunk.js","sourcesContent":["//Existing useLocalStorage hooks exist which should be used so we don't reinvent the wheel\r\n//Creating my own as a learning experience for this project\r\n\r\nimport React,{useEffect, useState} from 'react';\r\n\r\ntype IReturn <Type> = [\r\n    Type | null,\r\n    React.Dispatch<React.SetStateAction<Type | null>>,\r\n    boolean\r\n]\r\n\r\n\r\nconst useLocalStorage = <Type extends {}>(key: string, initialValue?: Type): IReturn<Type> => {\r\n    const initialFunction = () => {\r\n        try{\r\n            if(!initialValue) return;\r\n            const currentValue = localStorage.getItem(key);\r\n            \r\n            if(!currentValue){\r\n                return initialValue;\r\n            }\r\n\r\n            return JSON.parse(currentValue);\r\n        } catch(err){\r\n            console.log(err);\r\n            return initialValue;\r\n        }\r\n    }\r\n\r\n    const [localStorageState,setLocalStorageState] = useState<Type | null>(initialFunction);\r\n    const [ isComponentMounted, setIsComponentMounted] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        if(localStorageState === undefined) return;\r\n\r\n        try{\r\n            localStorage.setItem(key,JSON.stringify(localStorageState));\r\n            setIsComponentMounted(true);\r\n        } catch (err){\r\n            console.log(err);\r\n            setIsComponentMounted(true);\r\n            return;\r\n        }\r\n    },[localStorageState, key])\r\n\r\n    return [localStorageState,setLocalStorageState, isComponentMounted];    \r\n}\r\n\r\nexport default useLocalStorage;","import { createContext } from \"react\";\r\n\r\nexport interface ISearchQueryStates {\r\n    searchQuery: string,\r\n    setSearchQuery: (searchQuery: string) => void\r\n}\r\n\r\nconst SearchContext = createContext<ISearchQueryStates>({\r\n    searchQuery: \"\",\r\n    setSearchQuery: (searchQuery: string) => {}\r\n})\r\n\r\nexport const SearchContextConsumer = SearchContext.Consumer;\r\nexport const SearchContextProvider = SearchContext.Provider;\r\nexport default SearchContext; ","import { useContext, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchContext from \"../contexts/search\";\r\n\r\nconst Header = () => {\r\n  const { searchQuery, setSearchQuery } = useContext(SearchContext);\r\n\r\n  const [searchQueryState, setSearchQueryState] = useState(searchQuery);\r\n\r\n  const HeaderContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background: #f8f8f8;\r\n    box-shadow: 0px 3px 8px 0px rgba(62, 100, 146, 0.16);\r\n\r\n    @media (min-width: 0px) and (max-width: 910px) {\r\n      height: 50px;\r\n      font-size: 13px;\r\n    }\r\n\r\n    @media (min-width: 910px) and (max-width: 1537px) {\r\n      height: 60px;\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media (min-width: 1537px) {\r\n      height: 80px;\r\n      font-size: 22px;\r\n    }\r\n  `;\r\n\r\n  const handleSearchChange = (newSearch: string) => {\r\n    setSearchQueryState(newSearch);\r\n\r\n    if(newSearch === searchQuery){\r\n      return;\r\n    }\r\n\r\n    setSearchQuery(newSearch);\r\n  }\r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <TextField\r\n      style={{width: \"80%\", backgroundColor: \"white\"}}\r\n        autoFocus\r\n        value={searchQueryState}\r\n        onChange={(e) => {handleSearchChange(e.target.value)}}\r\n        variant=\"outlined\"\r\n      ></TextField>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const GetMovieTitles = async (searchQuery: string) => {\r\n    const response = await fetch(`https://www.omdbapi.com/?s=${searchQuery}&type=movie&apikey=be83d040`);\r\n\r\n    const post = await APIParser(response);\r\n\r\n    return post;\r\n}\r\n\r\nexport const GetMovieByTitle = async (title: string) => {\r\n    const response = await fetch(`https://www.omdbapi.com/?t=${title}&plot=full&apikey=be83d040`);\r\n\r\n    const post = await APIParser(response);\r\n\r\n    return post;\r\n}\r\n\r\nconst APIParser = async (response: Response) => {\r\n    if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    \r\n      return Promise.reject(response);\r\n}","import { createContext } from \"react\";\r\n\r\nexport interface NominationObject {\r\n    Title: string,\r\n    Year: string,\r\n    Poster: string\r\n}\r\n\r\nexport interface INominationStates {\r\n    nominations: NominationObject[] | null,\r\n    setNominations: (nominations: any) => void\r\n}\r\n\r\nconst NominationContext = createContext<INominationStates>({\r\n    nominations: [],\r\n    setNominations: (nominations: NominationObject[]) => {}\r\n})\r\n\r\nexport const NominationContextConsumer = NominationContext.Consumer;\r\nexport const NominationContextProvider = NominationContext.Provider;\r\nexport default NominationContext; ","import styled from \"styled-components\";\r\n\r\n\r\nexport const TileContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: fit-content;\r\n  border-radius: 10px;\r\n  background-color: #E8E8E8;\r\n  box-shadow: 0 3px 6px -4px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);\r\n`;","import { FC, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { TileContainer } from \"../styling/tile\";\r\nimport { GetMovieByTitle } from \"../api/GetMovies\";\r\n\r\n\r\ninterface SearchResultProps {\r\n  Title: string;\r\n  Year?: string;\r\n  Poster?: string;\r\n  shouldGetDescription: boolean;\r\n  buttonText?: string;\r\n  buttonAction: (newTitle: string, newYear?: string, newPoster?: string) => void;\r\n  isDisabled?: boolean;\r\n}\r\n\r\nconst SearchResult: FC<SearchResultProps> = ({ Title, Year, Poster,shouldGetDescription, buttonText, buttonAction, isDisabled = false}) => {\r\n  const [movieDescription, setMovieDescription] = useState(\"\");\r\n\r\n  const getMovieDescription = async () => {\r\n    try {\r\n      const data = await GetMovieByTitle(Title);\r\n\r\n      if (data.Response === \"True\") {\r\n        setMovieDescription(data.Plot);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    //Too slow for most uses\r\n    // shouldGetDescription && getMovieDescription();\r\n  },[movieDescription])\r\n\r\n  const ContentContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    align-items: center;\r\n\r\n    height: fit-content;\r\n  `;\r\n\r\n  const ContentTileContainer = styled(TileContainer)`\r\n    padding-left: 1.5vmax;\r\n    transition: background, color, box-shadow 0.3s linear;\r\n\r\n    &:hover {\r\n      box-shadow: 0 3px 6px -4px rgb(0 0 0 / 16%);\r\n      transition: box-shadow 0.3s linear;\r\n    }\r\n  `;\r\n\r\n  const TextContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n    width: 76%;\r\n    height: 85%;\r\n\r\n    overflow: hidden;\r\n  `;\r\n\r\n  const TitleContainer = styled.div`\r\n    display: block;\r\n    font-size: 2vw;\r\n    font-weight: bold;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n\r\n    @media (max-width: 910px) {\r\n      font-size: 4vw;\r\n    }\r\n  `;\r\n\r\n  const TextContentContainer = styled.div`\r\n    font-size: 1.1vw;\r\n\r\n    @media (max-width: 910px) {\r\n      display: none;\r\n    }\r\n    height: 80%;\r\n  `;\r\n\r\n  const ComponentContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 2vmax;\r\n  `;\r\n\r\n  const ImageContainer = styled.div`\r\n    margin: auto;\r\n    align-self: center;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    width: 170px;\r\n    height: 250px;\r\n  `;\r\n\r\n  const ButtonContainer = styled.div`\r\n    width: 60%;\r\n    height: 100%;\r\n  `;\r\n\r\n  return (\r\n    <ComponentContainer>\r\n      <ContentTileContainer>\r\n        <ContentContainer>\r\n          <ImageContainer>\r\n            <img src={Poster} width=\"100%\" height=\"100%\" alt=\"content image\" />\r\n          </ImageContainer>\r\n\r\n          <TextContainer>\r\n            <TitleContainer>{Title}</TitleContainer>\r\n            <TextContentContainer>\r\n              {`Release Year: ${Year}`}{\" \"}\r\n            </TextContentContainer>\r\n            <TextContentContainer>{movieDescription} </TextContentContainer>\r\n            <ButtonContainer>\r\n              <Button\r\n                onClick={() => {\r\n                  buttonAction(Title,Year, Poster);\r\n                }}\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n                variant=\"contained\"\r\n                disabled={isDisabled}\r\n              >\r\n                {buttonText}\r\n              </Button>\r\n            </ButtonContainer>\r\n          </TextContainer>\r\n        </ContentContainer>\r\n      </ContentTileContainer>\r\n    </ComponentContainer>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { GetMovieTitles } from \"../api/GetMovies\";\r\n\r\nimport NominationContext from \"../contexts/nomination\";\r\nimport SearchContext from \"../contexts/search\";\r\nimport MovieItem from \"./movie-item\";\r\n\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst NominationSection = () => {\r\n  const { searchQuery } = useContext(SearchContext);\r\n  const { nominations, setNominations } = useContext(NominationContext);\r\n\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isGettingData, setIsGettingData] = useState(false);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setIsGettingData(true);\r\n      const data = await GetMovieTitles(searchQuery);\r\n      setIsGettingData(false);\r\n\r\n      if (data.Response === \"True\") {\r\n        setSearchResults(data.Search);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (err) {\r\n      setSearchResults([]);\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchQuery === \"\") {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n    getData();\r\n  }, [searchQuery]);\r\n\r\n  const NominationContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n  `;\r\n\r\n  const SearchResults = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-top: 20px;\r\n    width: 75%;\r\n  `;\r\n\r\n  const NominationResults = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-top: 20px;\r\n    margin-left: 2vmax;\r\n    width: 20%;\r\n  `;\r\n\r\n  const SpinnerContainer = styled.div`\r\n    align-self: center;\r\n  `;\r\n\r\n  const AddNomination = (\r\n    newTitle: string,\r\n    newYear: string,\r\n    newPoster: string\r\n  ) => {\r\n    if (!Array.isArray(nominations)) {\r\n      return;\r\n    }\r\n\r\n    setNominations([\r\n      ...nominations,\r\n      { Title: newTitle, Year: newYear, Poster: newPoster },\r\n    ]);\r\n  };\r\n\r\n  const RemoveNomination = (newTitle: string) => {\r\n    if (!Array.isArray(nominations)) {\r\n      return;\r\n    }\r\n\r\n    const newNomination = nominations.filter(({ Title }) => Title !== newTitle);\r\n\r\n    setNominations(newNomination);\r\n  };\r\n\r\n  const checkIfDisabled = (movieTitle: string) => {\r\n    if (!Array.isArray(nominations)) {\r\n      return;\r\n    }\r\n\r\n    if (nominations.length >= 5) {\r\n      return true;\r\n    }\r\n\r\n    for (let i = 0; i < nominations.length; i++) {\r\n      const title = nominations[i].Title;\r\n\r\n      if (title === movieTitle) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <NominationContainer>\r\n      {\r\n        <SearchResults>\r\n          {isGettingData ? (\r\n            <SpinnerContainer>\r\n              <ClipLoader />\r\n            </SpinnerContainer>\r\n          ) : (\r\n            Array.isArray(searchResults) &&\r\n            <>\r\n                \r\n                {`Search results for \"${searchQuery}\"`}\r\n            {searchResults.map((movieItem: any) => {\r\n              return (\r\n                <MovieItem\r\n                  {...movieItem}\r\n                  buttonText={\"NOMINATE\"}\r\n                  buttonAction={AddNomination}\r\n                  shouldGetDescription={true}\r\n                  isDisabled={checkIfDisabled(movieItem.Title)}\r\n                ></MovieItem>\r\n              );\r\n            })\r\n        }\r\n            </>\r\n          )}\r\n        </SearchResults>\r\n      }\r\n\r\n      <NominationResults>\r\n          Nominations\r\n        {Array.isArray(nominations) &&\r\n          nominations.map((movieItem: any) => {\r\n            return (\r\n              <MovieItem\r\n                {...movieItem}\r\n                buttonText={\"REMOVE\"}\r\n                buttonAction={RemoveNomination}\r\n                shouldGetDescription={false}\r\n              ></MovieItem>\r\n            );\r\n          })}\r\n      </NominationResults>\r\n    </NominationContainer>\r\n  );\r\n};\r\n\r\nexport default NominationSection;\r\n","import styled from \"styled-components\";\r\n\r\nconst Banner = () => {\r\n  const BannerContainer = styled.div`\r\n    display: flex;\r\n    background-color: #ff9d00;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    height: 50px;\r\n  `;\r\n\r\n  const TextContainer = styled.span`\r\n    margin: auto;\r\n    text-align: center;\r\n   `;\r\n\r\n  return (\r\n    <BannerContainer>\r\n      {\" \"}\r\n      <TextContainer>\r\n        You're Finished! 5 Nominations have been selected. If you'd like to\r\n        change your selection, please remove a nomination you'd like to replace{\" \"}\r\n      </TextContainer>\r\n    </BannerContainer>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import {useContext, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Header from \"../components/header\";\r\nimport NominationSection from \"../components/NominationSection\";\r\nimport SearchContext from \"../contexts/search\";\r\nimport NominationContext from \"../contexts/nomination\";\r\nimport Banner from \"../components/banner\";\r\n\r\nconst Homepage = () => {\r\n\r\n    const {searchQuery} = useContext(SearchContext);\r\n\r\n    const{nominations} = useContext(NominationContext);\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                Array.isArray(nominations) && nominations.length >= 5 &&\r\n                    <Banner/>\r\n            }\r\n            <Header/>\r\n            <NominationSection/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","import { useState } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nimport Homepage from \"./pages/Homepage\";\n\nimport {SearchContextProvider} from \"./contexts/search\";\nimport {NominationContextProvider, NominationObject} from \"./contexts/nomination\";\n\nfunction App() {\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [nominations,setNominations] = useLocalStorage<NominationObject[]>(\"nominations\",[]);\n\n  return (\n    <>\n      <SearchContextProvider value ={{searchQuery,setSearchQuery}}>\n        <NominationContextProvider value={{nominations,setNominations}}>\n        <Homepage/>\n\n        </NominationContextProvider>\n      </SearchContextProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}