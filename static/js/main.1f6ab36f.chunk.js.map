{"version":3,"sources":["hooks/useLocalStorage.tsx","contexts/search.tsx","components/header.tsx","api/GetMovies.tsx","contexts/nomination.tsx","components/NominationSection.tsx","styling/tile.tsx","pages/Homepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","currentValue","localStorage","getItem","JSON","parse","err","console","log","localStorageState","setLocalStorageState","isComponentMounted","setIsComponentMounted","useEffect","undefined","setItem","stringify","SearchContext","createContext","searchQuery","setSearchQuery","SearchContextProvider","Consumer","Provider","Header","useContext","HeaderContainer","styled","div","TextField","autoFocus","value","onChange","e","target","variant","GetMovieTitles","a","fetch","response","APIParser","post","ok","json","Promise","reject","NominationContext","nominations","setNominations","NominationContextProvider","NominationSection","getData","data","Search","NominationContainer","SearchResults","Array","isArray","map","movieItem","Homepage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f6ab36f.chunk.js","sourcesContent":["//Existing useLocalStorage hooks exist which should be used so we don't reinvent the wheel\r\n//Creating my own as a learning experience for this project\r\n\r\nimport React,{useEffect, useState} from 'react';\r\n\r\ntype IReturn <Type> = [\r\n    Type | null,\r\n    React.Dispatch<React.SetStateAction<Type | null>>,\r\n    boolean\r\n]\r\n\r\n\r\nconst useLocalStorage = <Type extends {}>(key: string, initialValue?: Type): IReturn<Type> => {\r\n    const initialFunction = () => {\r\n        try{\r\n            if(!initialValue) return;\r\n            const currentValue = localStorage.getItem(key);\r\n            \r\n            if(!currentValue){\r\n                return initialValue;\r\n            }\r\n\r\n            return JSON.parse(currentValue);\r\n        } catch(err){\r\n            console.log(err);\r\n            return initialValue;\r\n        }\r\n    }\r\n\r\n    const [localStorageState,setLocalStorageState] = useState<Type | null>(initialFunction);\r\n    const [ isComponentMounted, setIsComponentMounted] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        if(localStorageState === undefined) return;\r\n\r\n        try{\r\n            localStorage.setItem(key,JSON.stringify(localStorageState));\r\n            setIsComponentMounted(true);\r\n        } catch (err){\r\n            console.log(err);\r\n            setIsComponentMounted(true);\r\n            return;\r\n        }\r\n    },[localStorageState, key])\r\n\r\n    return [localStorageState,setLocalStorageState, isComponentMounted];    \r\n}\r\n\r\nexport default useLocalStorage;","import { createContext } from \"react\";\r\n\r\nexport interface ISearchQueryStates {\r\n    searchQuery: string,\r\n    setSearchQuery: (searchQuery: string) => void\r\n}\r\n\r\nconst SearchContext = createContext<ISearchQueryStates>({\r\n    searchQuery: \"\",\r\n    setSearchQuery: (searchQuery: string) => {}\r\n})\r\n\r\nexport const SearchContextConsumer = SearchContext.Consumer;\r\nexport const SearchContextProvider = SearchContext.Provider;\r\nexport default SearchContext; ","import { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchContext from \"../contexts/search\";\r\n\r\nconst Header = () => {\r\n  const { searchQuery, setSearchQuery } = useContext(SearchContext);\r\n\r\n  const HeaderContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    background: #f8f8f8;\r\n    box-shadow: 0px 3px 8px 0px rgba(62, 100, 146, 0.16);\r\n\r\n    @media (min-width: 0px) and (max-width: 910px) {\r\n      height: 50px;\r\n      font-size: 13px;\r\n    }\r\n\r\n    @media (min-width: 910px) and (max-width: 1537px) {\r\n      height: 60px;\r\n      font-size: 16px;\r\n    }\r\n\r\n    @media (min-width: 1537px) {\r\n      height: 80px;\r\n      font-size: 22px;\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <TextField\r\n        autoFocus\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n        variant=\"outlined\"\r\n      ></TextField>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const GetMovieTitles = async (searchQuery: string) => {\r\n    const response = await fetch(`http://www.omdbapi.com/?s=${searchQuery}&type=movie&apikey=be83d040`);\r\n\r\n    const post = await APIParser(response);\r\n\r\n    console.log('POST');\r\n    console.log(post);\r\n\r\n    return post;\r\n}\r\n\r\nconst APIParser = async (response: Response) => {\r\n    if (response.ok) {\r\n        return await response.json();\r\n      }\r\n    \r\n      return Promise.reject(response);\r\n}","import { createContext } from \"react\";\r\n\r\nexport interface INominationStates {\r\n    nominations: any,\r\n    setNominations: (nominations: any) => void\r\n}\r\n\r\nconst NominationContext = createContext<INominationStates>({\r\n    nominations: [],\r\n    setNominations: (nominations: any) => {}\r\n})\r\n\r\nexport const NominationContextConsumer = NominationContext.Consumer;\r\nexport const NominationContextProvider = NominationContext.Provider;\r\nexport default NominationContext; ","import { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {GetMovieTitles} from \"../api/GetMovies\";\r\n\r\nimport NominationContext from \"../contexts/nomination\";\r\nimport SearchContext from \"../contexts/search\";\r\nimport SearchResult from \"../components/search-result\";\r\n\r\n\r\nconst NominationSection = () => {\r\n\r\n    const {searchQuery} = useContext(SearchContext);\r\n    const {nominations,setNominations} = useContext(NominationContext);\r\n\r\n    const getData = async () => {\r\n        \r\n        try{\r\n            const data = await GetMovieTitles(searchQuery);\r\n            console.log(\"DATA: \");\r\n            console.log(data);\r\n\r\n            if(data.response = \"True\"){\r\n                setNominations(data.Search);\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(searchQuery === \"\"){\r\n            return;\r\n        }\r\n\r\n        getData();\r\n    },[searchQuery])\r\n\r\n    const NominationContainer = styled.div`\r\n        display: flex;\r\n        flex-direction: row;\r\n    `\r\n\r\n    const SearchResults = styled.div`\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 75%;\r\n    `\r\n\r\n    return(\r\n        <NominationContainer>\r\n            <SearchResults>\r\n                {\r\n                    Array.isArray(nominations) &&\r\n                        nominations.map((movieItem) => {\r\n                            <SearchResult {...movieItem} ></SearchResult>\r\n                        })\r\n                }\r\n            </SearchResults>\r\n        </NominationContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default NominationSection;","import styled from \"styled-components\";\r\n\r\n\r\nexport const TileContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: fit-content;\r\n  border-radius: 10px;\r\n  background-color: #E8E8E8;\r\n  box-shadow: 0 3px 6px -4px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);\r\n`;","import {useContext, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Header from \"../components/header\";\r\nimport NominationSection from \"../components/NominationSection\";\r\nimport SearchContext from \"../contexts/search\";\r\nimport NominationContext from \"../contexts/nomination\";\r\n\r\nconst Homepage = () => {\r\n\r\n    const {searchQuery} = useContext(SearchContext);\r\n\r\n    const{nominations} = useContext(NominationContext);\r\n\r\n    useEffect(() => {\r\n        console.log('SEARCH: ');\r\n        console.log(searchQuery);\r\n\r\n        console.log(\"NOMINATIONS: \");\r\n        console.log(nominations);\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <Header/>\r\n            <NominationSection/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","import { useState } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nimport Homepage from \"./pages/Homepage\";\n\nimport {SearchContextProvider} from \"./contexts/search\";\nimport {NominationContextProvider} from \"./contexts/nomination\";\n\nfunction App() {\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [nominations,setNominations, isComponentMounted] = useLocalStorage(\"nominations\",[]);\n\n  return (\n\n    !isComponentMounted ? <div></div> :\n\n    <>\n      <SearchContextProvider value ={{searchQuery,setSearchQuery}}>\n        <NominationContextProvider value={{nominations,setNominations}}>\n        <Homepage/>\n\n        </NominationContextProvider>\n      </SearchContextProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}